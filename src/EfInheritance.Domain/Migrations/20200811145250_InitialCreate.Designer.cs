// <auto-generated />
using System;
using EfInheritance.Shared;
using EfInheritanceTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EfInheritance.Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200811145250_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EfInheritanceTest.Domain.Choices.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasLicense")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.HasIndex("Id", "VehicleId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("EfInheritanceTest.Domain.VehicleBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("EfInheritanceTest.Domain.Choosable.Automobile", b =>
                {
                    b.HasBaseType("EfInheritanceTest.Domain.VehicleBase");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EfInheritanceTest.Domain.Choosable.Plane", b =>
                {
                    b.HasBaseType("EfInheritanceTest.Domain.VehicleBase");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EfInheritanceTest.Domain.Choosable.Yact", b =>
                {
                    b.HasBaseType("EfInheritanceTest.Domain.VehicleBase");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("EfInheritanceTest.Domain.NoneDrivable.Drone", b =>
                {
                    b.HasBaseType("EfInheritanceTest.Domain.VehicleBase");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("EfInheritanceTest.Domain.Choices.Driver", b =>
                {
                    b.HasOne("EfInheritanceTest.Domain.Choosable.Automobile", null)
                        .WithMany("Drivers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EfInheritanceTest.Domain.Choosable.Plane", null)
                        .WithMany("Drivers")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_Drivers_Vehicles_VehicleId1")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EfInheritanceTest.Domain.Choosable.Yact", null)
                        .WithMany("Drivers")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_Drivers_Vehicles_VehicleId2")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
